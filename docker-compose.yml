version: '3.8'

services:
  app:
    build:
      context: .
      target: dev
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./data:/app/data
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatdb
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chatdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - BACKEND_URL=http://app:8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    labels:
      - "com.docker.compose.service=fashion-search-frontend"


volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
